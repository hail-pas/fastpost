# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rpcs.hello import hello_pb2 as rpcs_dot_hello_dot_hello__pb2


class HelloStub(object):
    """Service Definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HelloRPC = channel.unary_unary(
                '/Hello/HelloRPC',
                request_serializer=rpcs_dot_hello_dot_hello__pb2.HelloIn.SerializeToString,
                response_deserializer=rpcs_dot_hello_dot_hello__pb2.HelloOut.FromString,
                )
        self.MultiHelloRPC = channel.unary_unary(
                '/Hello/MultiHelloRPC',
                request_serializer=rpcs_dot_hello_dot_hello__pb2.HelloIn.SerializeToString,
                response_deserializer=rpcs_dot_hello_dot_hello__pb2.MultiHelloOut.FromString,
                )
        self.ResStreamHelloRPC = channel.unary_stream(
                '/Hello/ResStreamHelloRPC',
                request_serializer=rpcs_dot_hello_dot_hello__pb2.HelloIn.SerializeToString,
                response_deserializer=rpcs_dot_hello_dot_hello__pb2.HelloOut.FromString,
                )
        self.ReqStreamHelloRPC = channel.stream_unary(
                '/Hello/ReqStreamHelloRPC',
                request_serializer=rpcs_dot_hello_dot_hello__pb2.HelloIn.SerializeToString,
                response_deserializer=rpcs_dot_hello_dot_hello__pb2.MultiHelloOut.FromString,
                )
        self.BiStreamHelloRPC = channel.stream_stream(
                '/Hello/BiStreamHelloRPC',
                request_serializer=rpcs_dot_hello_dot_hello__pb2.HelloIn.SerializeToString,
                response_deserializer=rpcs_dot_hello_dot_hello__pb2.HelloOut.FromString,
                )


class HelloServicer(object):
    """Service Definition.
    """

    def HelloRPC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MultiHelloRPC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResStreamHelloRPC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReqStreamHelloRPC(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BiStreamHelloRPC(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HelloServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HelloRPC': grpc.unary_unary_rpc_method_handler(
                    servicer.HelloRPC,
                    request_deserializer=rpcs_dot_hello_dot_hello__pb2.HelloIn.FromString,
                    response_serializer=rpcs_dot_hello_dot_hello__pb2.HelloOut.SerializeToString,
            ),
            'MultiHelloRPC': grpc.unary_unary_rpc_method_handler(
                    servicer.MultiHelloRPC,
                    request_deserializer=rpcs_dot_hello_dot_hello__pb2.HelloIn.FromString,
                    response_serializer=rpcs_dot_hello_dot_hello__pb2.MultiHelloOut.SerializeToString,
            ),
            'ResStreamHelloRPC': grpc.unary_stream_rpc_method_handler(
                    servicer.ResStreamHelloRPC,
                    request_deserializer=rpcs_dot_hello_dot_hello__pb2.HelloIn.FromString,
                    response_serializer=rpcs_dot_hello_dot_hello__pb2.HelloOut.SerializeToString,
            ),
            'ReqStreamHelloRPC': grpc.stream_unary_rpc_method_handler(
                    servicer.ReqStreamHelloRPC,
                    request_deserializer=rpcs_dot_hello_dot_hello__pb2.HelloIn.FromString,
                    response_serializer=rpcs_dot_hello_dot_hello__pb2.MultiHelloOut.SerializeToString,
            ),
            'BiStreamHelloRPC': grpc.stream_stream_rpc_method_handler(
                    servicer.BiStreamHelloRPC,
                    request_deserializer=rpcs_dot_hello_dot_hello__pb2.HelloIn.FromString,
                    response_serializer=rpcs_dot_hello_dot_hello__pb2.HelloOut.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Hello', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Hello(object):
    """Service Definition.
    """

    @staticmethod
    def HelloRPC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Hello/HelloRPC',
            rpcs_dot_hello_dot_hello__pb2.HelloIn.SerializeToString,
            rpcs_dot_hello_dot_hello__pb2.HelloOut.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MultiHelloRPC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Hello/MultiHelloRPC',
            rpcs_dot_hello_dot_hello__pb2.HelloIn.SerializeToString,
            rpcs_dot_hello_dot_hello__pb2.MultiHelloOut.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResStreamHelloRPC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Hello/ResStreamHelloRPC',
            rpcs_dot_hello_dot_hello__pb2.HelloIn.SerializeToString,
            rpcs_dot_hello_dot_hello__pb2.HelloOut.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReqStreamHelloRPC(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Hello/ReqStreamHelloRPC',
            rpcs_dot_hello_dot_hello__pb2.HelloIn.SerializeToString,
            rpcs_dot_hello_dot_hello__pb2.MultiHelloOut.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BiStreamHelloRPC(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Hello/BiStreamHelloRPC',
            rpcs_dot_hello_dot_hello__pb2.HelloIn.SerializeToString,
            rpcs_dot_hello_dot_hello__pb2.HelloOut.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
